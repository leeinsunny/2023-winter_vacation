package java_concept;
/*
 < 클래스와 인스턴스 >
 클래스는 어떠한 형틀이고, 인스턴스는 그 형틀로 찍어낸 실체와도 같은 것이다.
 그래서 클래스를 바꾸면 그것으로 찍어낸 모든 사물들이 다른 형태를 갖게 되고, 
 형틀로 찍어낸 사물을 바꾸면 그 사물의 자매와도 같은 다른 사물에는 어떠한 영향도 없다.
 -> 즉, 객체를 인스턴스로 만들면, 그 인스턴스를 바꾼다고 해도 다른 인스턴스에는 영향을 끼치지 않게 된다.
 */
 class Print3 {
	 
	public String delimiter = "";
	
	public void A() {
		System.out.println(delimiter);
		System.out.println("A");
		System.out.println("A");
	}
	
	public void B() {
		System.out.println(delimiter);
		System.out.println("B");
		System.out.println("B");
	}
}
 

public class MyOOP3 {

	public static void main(String[] args) {
	
		Print3 p1 = new Print3();
		Print3 p2 = new Print3();
		
		p1.delimiter="-----";
		p2.delimiter="++++++++";
		
		p1.A();
		p1.B();
		p2.A();
		p2.B();
		
	}

}


/*
 구분자를 바꿀때 마다 필드에 새로 대입하여 만들었어야 했는데, 
 구분자마다 인스턴스를 만들어 진행하면 그러한 수고가 덜어진다. 
 
 static 변수와 메소드는 모든 클래스가 공유하고 있는 클래스 소속이기 때문에, 
 인스턴스의 변수와 메소드로 만들어 주기 위해서 static 키워드를 제거한다.
 
 p1, p2 두 개의 인스턴스를 print클래스를 이용해서 찍어낸 후,
 각각 다른 구분자를 넣어 준다.
 
 그리고 나서 번거롭게 구분자를 새로 대입할 필요 없이 필요한 구분자를 가지고 있는 인스턴스에서 
 메소드를 각각 호출하면 같은 기능을 하게 되는 것을 알 수 있다. 
 */



/*
 <인스턴스가 필요한 상황은 어떤 상황일까?>
 인스턴스를 사용할 때: 사용하는 클래스에 대한 파라미터값 수정을 한 번만 하면 끝낼 수 있다.
 인스턴스를 사용하지 않을 때 : 매 클래스를 사용할 때마다 파라미터값에 대한 입력을 다시 해줘야 한다.
 
 -> 이는 클래스가 하나의 거대한 뼈대이고, 인스턴스가 클래스에서 파생되었기 때문인데,
 	공장으로 비유하면 다양한 종류의 빵을 찍어내는 기계가 있고 여러 종류의 빵을 찍어낸다고 가정하면
 	
 	인스턴스 : 각 종류의 빵찍는 기계들을 깔아두고 찍어내는 것
 	인스턴스 없이 : 하나의 기계를 두고, 각 종류의 빵을 찍어내는 것
 	
 	이다.
 */