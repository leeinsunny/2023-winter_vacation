package java_concept;
/*
 < 인터페이스의 형식 >
 클래스의 규격을 정의하는 인터페이스는 어떻게 사용해야 할까?
 인터페이스의 형식에 대해서 알아보자
 */
interface Calculable_final
{
	double PI = 3.14;
	int sum (int v1, int v2);
}

interface Printable_final{
	void print();
}

class Real implements Calculable_final, Printable_final
{

	public void print() {
		System.out.println("This is real~!");
		
	}

	public int sum(int v1, int v2) {
		return v1+v2;
		
	}
}

public class InterfaceAPP2 {

	public static void main(String[] args) {
		Real a = new Real();
		System.out.println(a.sum(1, 2));
		a.print();
		System.out.println(a.PI);

	}

}
/*
 < 인터페이스의 형식 >
 인터페이스의 이름은 클래스와 마찬가지로 보통 첫 글자를 대문자로 만들고,
 "~을 할 수 있는" 것들의 규격이라는 의미에서 형용사의 이름을 붙이기도 한다.
 그리고 클래스를 상속할 때는 하나의 클래스로부터 상속받을 수 있는 것과 대조적으로 
 인터페이스는 여러개를 모두 적용할 수 있다.
 이 경우 적용한 인터페이스들의 메소드를 모두 구현해야 한다.
 
 인터페이스에는 변수를 정의할 수도 있다
 다만 변수는 반드시 초기화되어야 한다.
 인터페이스를 적용한 클래스는 변수를 다시 대입할 수 없다.


-> 중요한 것!
	즉, 인터페이스에는 메소드와 변수가 정의될 수 있는데,
	변수에는 값이 있고, 메소드에는 실제 구현이 들어있지 않아서
	메소드를 구현하는 클래스가 인터페이스에 적혀있는 형태를 만족하는 메소드의 내용을 직접 구현해야한다.
	
-> 정리하면
	인터페이스는 껍데기만 만드는 구조 ( 메소드 껍데기 만들기 )
	실제 구현은 implements 받은 클래스 내 메소드에서 실구현
 */



/*
 < 여러 인터페이스를 한꺼번에 적용받는다면 어떤 점이 좋을까? >
- 여러가지 기능을 다양하게 가지고 있는 클래스들의 경우에는 각 기능들을 인터페이스로 나눠서 필요한 기능들만 
추가할 수 있을 것 같다. 
예를 들어 정원에서 물을 주는 자동 스프링쿨러를 생각해본다면

1) 기본 스프링 쿨러
2) 온도 감지 스프링 쿨러

이렇게 2개의 클래스를 만든다고 했을 대 사용할 수 있는 인터페이스들을 아래와 같이 만들어 놓는다면

< 인터페이스 목록 > 
- 기본 물 분사 가능한
- 회전 가능한
- 타이머 가능한
- 온도 확인이 가능한
- 온도에 따른 물분사가 가능한

각 클래스에 다음과 같이 인터페이스를 적용할 수 있으니 편리할 것 같다.

1) 기본 스프링 쿨러 implements 기본 물 분사 가능한, 회전 가능한, 타이머 가능한
2) 온도 감지 스프링 쿨러 implements 온도 확인이 가능한, 온도에 따른 물 분사 가능한, 회전 가능한,
 	타이머 가능한

 */
